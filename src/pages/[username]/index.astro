---
import MainLayout from "../../components/MainLayout.astro";
import ProfileCard from "../../components/shared/ProfileCard";
import OnchainProfileWrapper from "../../components/onchain/OnchainProfileWrapper";
import WelcomeBanner from "../../components/shared/profile/WelcomeBanner";
import PendingVerificationBanner from "../../components/shared/profile/PendingVerificationBanner";
import { createSupabaseServerClient } from "../../lib/supabase/serverClient";
import { getDeveloperByUsername, getCurrentUser } from "../../lib/auth";
import type { DeveloperUI } from "../../types/developer";

export const prerender = false;

const { username } = Astro.params;

// Get developer from Supabase database
const supabase = createSupabaseServerClient(Astro.cookies as any);
const currentUser = await getCurrentUser(supabase);
const developer = await getDeveloperByUsername(supabase, username || "");

// Redirect to developers list if profile not found
if (!developer) {
  return Astro.redirect("/developers");
}

// Check if user is the owner of this profile
const isOwner = currentUser && currentUser.id === developer.user_id;

// Only show if verified OR if owner viewing their own profile
if (!developer.is_verified && !isOwner) {
  return Astro.redirect("/developers");
}

// Check if this is a welcome redirect
const isWelcome = Astro.url.searchParams.get("welcome") === "true";

// Map database structure to component props
const dev: DeveloperUI = {
  name: developer.name,
  username: developer.username,
  avatar: developer.avatar || "",
  bio: developer.bio || "",
  github: developer.github || "",
  linkedin: developer.linkedin || "",
  telegram: developer.telegram || "",
  website: developer.website || "",
  slushWallet: developer.slush_wallet || "",
  entry: developer.entry || "",
  projects: developer.projects || [],
  certificates: developer.certificates || [],
  walrusBlobId: developer.walrus_blob_id || null,
};

---

<MainLayout title={`${dev.name} - Developer Profile`}>
  <div class="min-h-screen pt-24 pb-16">
    <div class="container mx-auto px-6 sm:px-8 lg:px-12">
      <!-- Welcome Banner -->
      {isWelcome && isOwner && (
        <div class="mb-8 animate-fade-in">
          <WelcomeBanner client:only="react" />
        </div>
      )}

      <!-- Pending Verification Banner -->
      {
        isOwner && developer && !developer.is_verified && !isWelcome && (
          <div class="mb-8 animate-fade-in">
            <PendingVerificationBanner client:only="react" />
          </div>
        )
      }

      <!-- Profile Card -->
      <div class="mx-auto max-w-6xl">
        <div
          class="relative rounded-2xl border border-white/10 bg-white/5 p-4 sm:p-8 md:p-10 lg:p-16 backdrop-blur-md transition-all duration-300 hover:border-white/20 hover:bg-white/[0.06] hover:shadow-2xl hover:shadow-purple-500/10"
        >
          {dev.walrusBlobId ? (
            <>
              <!-- Onchain profile (priority if walrus_blob_id exists) -->
              <div id="onchain-profile">
                <OnchainProfileWrapper
                  client:only="react"
                  username={dev.username}
                  showEditButton={isOwner || undefined}
                />
              </div>

              <!-- Offchain fallback (hidden, shown only if onchain fails) -->
              <div id="static-profile" style="display:none">
                <ProfileCard
                  client:only="react"
                  variant="offchain"
                  name={dev.name}
                  username={dev.username}
                  avatar={dev.avatar}
                  bio={dev.bio}
                  entry={dev.entry}
                  github={dev.github}
                  linkedin={dev.linkedin}
                  telegram={dev.telegram}
                  website={dev.website}
                  walletAddress={dev.slushWallet}
                  projects={dev.projects}
                  certificates={dev.certificates}
                  showEditButton={isOwner || undefined}
                  isOwner={isOwner || undefined}
                />
              </div>
            </>
          ) : (
            <!-- Offchain profile only (no walrus_blob_id) -->
            <div id="static-profile">
              <ProfileCard
                client:only="react"
                variant="offchain"
                name={dev.name}
                username={dev.username}
                avatar={dev.avatar}
                bio={dev.bio}
                entry={dev.entry}
                github={dev.github}
                linkedin={dev.linkedin}
                telegram={dev.telegram}
                website={dev.website}
                walletAddress={dev.slushWallet}
                projects={dev.projects}
                certificates={dev.certificates}
                showEditButton={isOwner || undefined}
                isOwner={isOwner || undefined}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fade-in {
      animation: fade-in 0.5s ease-out;
    }
  </style>
</MainLayout>
