---
import MainLayout from "../components/MainLayout.astro";
import CopyButton from "../components/shared/CopyButton";
import ProfileFormWrapper from "../components/shared/ProfileFormWrapper";
import WalrusBadge from "../components/shared/WalrusBadge";
import WalrusStorageInfoWrapper from "../components/dashboard/WalrusStorageInfoWrapper";
import EditableAvatar from "../components/dashboard/EditableAvatar";
import { createSupabaseServerClient } from "../lib/supabase/serverClient";
import { getCurrentUser, getDeveloperProfile } from "../lib/auth";
import { shortenAddress } from "../lib/utils";
import { getDevIdByUsername } from "../lib/sui-views";
import {
  getBlobMetadata,
  type WalrusBlobMetadata,
} from "../lib/walrus-metadata";

export const prerender = false;

// Check authentication
const supabase = createSupabaseServerClient(Astro.cookies as any);
const user = await getCurrentUser(supabase);

if (!user) {
  return Astro.redirect("/login");
}

// Get developer profile
const developer = await getDeveloperProfile(supabase, user.id);

if (!developer) {
  // User logged in but no profile yet - redirect to register
  return Astro.redirect("/register");
}

const isWelcome = Astro.url.searchParams.get("welcome") === "true";

// Query devId and blob metadata from blockchain if profile is onchain
let devId: string | null = null;
let blobMetadata: WalrusBlobMetadata | null = null;

if (developer.walrus_blob_id) {
  console.log(
    "[Dashboard] Developer has walrus_blob_id:",
    developer.walrus_blob_id
  );
  try {
    devId = await getDevIdByUsername(developer.username);

    // Query blob metadata using blob_object_id (Sui object ID)
    if (developer.blob_object_id) {
      try {
        console.log(
          "[Dashboard] Fetching blob metadata using blob_object_id:",
          developer.blob_object_id
        );
        blobMetadata = await getBlobMetadata(
          developer.blob_object_id,
          "testnet"
        );

        if (blobMetadata) {
          console.log("[Dashboard] ‚úÖ Blob metadata retrieved successfully!");
          console.log("[Dashboard] Storage:", blobMetadata.storage);
        } else {
          console.log("[Dashboard] ‚ö†Ô∏è Blob metadata not found");
        }
      } catch (metadataError: any) {
        console.error(
          "[Dashboard] Failed to fetch blob metadata:",
          metadataError?.message || metadataError
        );
      }
    } else {
      console.log(
        "[Dashboard] ‚ÑπÔ∏è No blob_object_id stored - storage info unavailable"
      );
    }
  } catch (error: any) {
    console.error(
      "[Dashboard] Failed to fetch devId:",
      error?.message || error
    );
  }
}

// Format Telegram username to display
function formatTelegramDisplay(telegram: string | null): string {
  if (!telegram) return "";

  // Remove @ symbol if present
  const cleaned = telegram.replace(/^@/, "");

  // If it's a full URL, extract username
  const urlMatch = telegram.match(/t\.me\/(@?)(.+)/);
  if (urlMatch) {
    return `@${urlMatch[2]}`;
  }

  return `@${cleaned}`;
}

// Format Telegram link
function formatTelegramLink(telegram: string | null): string {
  if (!telegram) return "";

  // If already a full URL, return as is (assuming it's valid)
  if (telegram.startsWith("http")) {
    return telegram;
  }

  // Remove @ symbol if present
  const cleaned = telegram.replace(/^@/, "");

  return `https://t.me/${cleaned}`;
}
---

<MainLayout title="Dashboard">
  <div class="min-h-screen pt-20">
    <div class="container mx-auto px-4 py-8">
      {
        isWelcome && (
          <div class="mb-6 rounded-lg border border-green-200 bg-green-50 p-4 text-green-800">
            <h3 class="font-semibold">Welcome to Dolphinder! üéâ</h3>
            <p class="mt-1 text-sm">
              Your profile has been created and is pending verification.
              Complete your profile below.
            </p>
          </div>
        )
      }

      {
        !developer.is_verified && (
          <div class="mb-6 rounded-lg border border-yellow-200 bg-yellow-50 p-4 text-yellow-800">
            <h3 class="font-semibold">‚è≥ Pending Verification</h3>
            <p class="mt-1 text-sm">
              Your profile is awaiting admin approval. You can still edit your
              information.
            </p>
          </div>
        )
      }

      <div class="grid gap-8 lg:grid-cols-3">
        <!-- Profile Preview -->
        <div class="lg:col-span-1">
          <div class="bg-card rounded-lg border p-6">
            <div class="mb-4 flex items-center justify-between">
              <h2 class="text-lg font-semibold">Profile Preview</h2>
              <a
                href={`/${developer.username}`}
                class="text-primary text-sm hover:underline"
              >
                View Profile
              </a>
            </div>
            <div class="space-y-4">
              <EditableAvatar
                client:load
                avatar={developer.avatar || undefined}
                name={developer.name}
                username={developer.username}
              />
              <div class="mt-4 text-center">
                <h3 class="text-xl font-bold">{developer.name}</h3>

                <!-- Username with Badge on same line -->
                <div class="flex items-center justify-center gap-2">
                  <p class="text-muted-foreground text-sm">
                    @{developer.username}
                  </p>
                  <WalrusBadge
                    client:load
                    variant={developer.walrus_blob_id ? "onchain" : "offchain"}
                    size="sm"
                  />
                </div>

                {
                  developer.entry && (
                    <span class="bg-primary/10 text-primary mt-2 inline-block rounded-full px-3 py-1 text-xs font-medium">
                      {developer.entry}
                    </span>
                  )
                }
              </div>
              {
                developer.bio && (
                  <p class="text-center text-sm">{developer.bio}</p>
                )
              }

              <!-- Onchain Verification - Walrus Storage Info -->
              {
                developer.walrus_blob_id && devId && blobMetadata && (
                  <WalrusStorageInfoWrapper
                    client:load
                    blobMetadata={blobMetadata}
                    devId={devId}
                    walrusBlobId={developer.walrus_blob_id}
                    blobObjectId={developer.blob_object_id || ""}
                    developer={developer}
                  />
                )
              }
              <div class="space-y-1 text-sm">
                {
                  developer.github && (
                    <div class="group relative flex items-center gap-2">
                      <span class="text-muted-foreground">GitHub:</span>
                      <a
                        href={developer.github}
                        target="_blank"
                        class="text-primary hover:underline"
                      >
                        {developer.github.replace("https://github.com/", "@")}
                      </a>
                      <div class="ml-1 opacity-0 transition-opacity group-hover:opacity-100">
                        <CopyButton
                          client:load
                          originText={developer.github}
                          variant="ghost"
                          size="icon-sm"
                        />
                      </div>
                    </div>
                  )
                }
                {
                  developer.linkedin && (
                    <div class="group relative flex items-center gap-2">
                      <span class="text-muted-foreground">LinkedIn:</span>
                      <a
                        href={developer.linkedin}
                        target="_blank"
                        class="text-primary hover:underline"
                      >
                        Profile
                      </a>
                      <div class="ml-1 opacity-0 transition-opacity group-hover:opacity-100">
                        <CopyButton
                          client:load
                          originText={developer.linkedin}
                          variant="ghost"
                          size="icon-sm"
                        />
                      </div>
                    </div>
                  )
                }
                {
                  developer.telegram && (
                    <div class="group relative flex items-center gap-2">
                      <span class="text-muted-foreground">Telegram:</span>
                      <a
                        href={formatTelegramLink(developer.telegram)}
                        target="_blank"
                        class="text-primary hover:underline"
                      >
                        {formatTelegramDisplay(developer.telegram)}
                      </a>
                      <div class="ml-1 opacity-0 transition-opacity group-hover:opacity-100">
                        <CopyButton
                          client:load
                          originText={formatTelegramLink(developer.telegram)}
                          variant="ghost"
                          size="icon-sm"
                        />
                      </div>
                    </div>
                  )
                }
                {
                  developer.slush_wallet && (
                    <div class="group relative flex items-center gap-2">
                      <span class="text-muted-foreground">Wallet:</span>
                      <code class="text-xs">
                        {shortenAddress(developer.slush_wallet)}
                      </code>
                      <div class="ml-1 opacity-0 transition-opacity group-hover:opacity-100">
                        <CopyButton
                          client:load
                          originText={developer.slush_wallet}
                          variant="ghost"
                          size="icon-sm"
                        />
                      </div>
                    </div>
                  )
                }
              </div>
            </div>
          </div>
        </div>

        <!-- Edit Form -->
        <div class="lg:col-span-2">
          <div class="bg-card rounded-lg border p-6">
            <h2 class="mb-4 text-lg font-semibold">Edit Profile</h2>
            <ProfileFormWrapper client:load developer={developer} />
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
